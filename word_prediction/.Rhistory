shiny::runApp('courses/DataScienceCapstone/final/en_US/FinalCapstone')
shiny::runApp('courses/DataScienceCapstone/final/en_US/FinalCapstone')
shiny::runApp('courses/DataScienceCapstone/final/en_US/word_prediction')
install.packages("stringr")
shiny::runApp('courses/DataScienceCapstone/final/en_US/word_prediction')
install.packages("dplyr")
install.packages("data.table")
shiny::runApp('courses/DataScienceCapstone/final/en_US/word_prediction')
shiny::runApp('courses/DataScienceCapstone/final/en_US/word_prediction')
shiny::runApp('courses/DataScienceCapstone/final/en_US/word_prediction')
shiny::runApp('courses/DataScienceCapstone/final/en_US')
shiny::runApp('courses/DataScienceCapstone/final/en_US/word_prediction')
shiny::runApp('courses/DataScienceCapstone/final/en_US/word_prediction')
shiny::runApp('courses/DataScienceCapstone/final/en_US/word_prediction')
shiny::runApp('courses/DataScienceCapstone/final/en_US/word_prediction')
shiny::runApp('courses/DataScienceCapstone/final/en_US/word_prediction')
shiny::runApp('courses/DataScienceCapstone/final/en_US/word_prediction')
shiny::runApp('courses/DataScienceCapstone/final/en_US/word_prediction')
library(knitr)
install.packages("knitr")
shiny::runApp('courses/DataScienceCapstone/final/en_US/word_prediction')
library(shiny)
## Load ngram_frequency data
library(data.table)
library(dplyr)
library(stringr)
corpus <- read.table("ngram_freq.csv", header = T, stringsAsFactors = F)
corpus <- as.tbl(corpus)
four_gram <- filter(corpus, n_gram == "four")
tri_gram <- filter(corpus, n_gram == "tri")
bi_gram <- filter(corpus, n_gram == "bi")
uni_gram <- filter(corpus, n_gram =="uni")
pred <- uni_gram
prediction <- function(x){
x <- tolower(x)
x <- str_replace_all(x, pattern = "[[:punct:]]", "")
x <- str_replace_all(x, pattern = "\\d+", replacement = "")
x <- str_replace_all(x, pattern = "\\s+", " ")
x <- str_trim(x, side = "both")
if (length(unlist(strsplit(x, " "))) >= 3){
x <- word(x, -3, -1)
if (x %in% four_gram$mat_word){
pred <- filter(four_gram, mat_word == x)}
else if(!x %in% four_gram$mat_word){
x <- word(x, -2, -1)
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if (!x %in% corpus){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
}
else if (length(unlist(strsplit(x, " "))) == 2){
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if(!x %in% tri_gram$mat_word){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
else if (length(unlist(strsplit(x, " "))) == 1){
if (x %in% bi_gram$mat_word){
pred <- filter(bi_gram, mat_word == x)}
}
pred <- arrange(pred, desc(counts))
return(head(pred))
}
prediction("happy")
getwd()
setwd("./courses/DataScienceCapstone/final/Next_Word_Prediction")
## Load ngram_frequency data
library(data.table)
library(dplyr)
library(stringr)
corpus <- read.table("ngram_freq.csv", header = T, stringsAsFactors = F)
corpus <- as.tbl(corpus)
four_gram <- filter(corpus, n_gram == "four")
tri_gram <- filter(corpus, n_gram == "tri")
bi_gram <- filter(corpus, n_gram == "bi")
uni_gram <- filter(corpus, n_gram =="uni")
pred <- uni_gram
prediction <- function(x){
x <- tolower(x)
x <- str_replace_all(x, pattern = "[[:punct:]]", "")
x <- str_replace_all(x, pattern = "\\d+", replacement = "")
x <- str_replace_all(x, pattern = "\\s+", " ")
x <- str_trim(x, side = "both")
if (length(unlist(strsplit(x, " "))) >= 3){
x <- word(x, -3, -1)
if (x %in% four_gram$mat_word){
pred <- filter(four_gram, mat_word == x)}
else if(!x %in% four_gram$mat_word){
x <- word(x, -2, -1)
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if (!x %in% corpus){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
}
else if (length(unlist(strsplit(x, " "))) == 2){
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if(!x %in% tri_gram$mat_word){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
else if (length(unlist(strsplit(x, " "))) == 1){
if (x %in% bi_gram$mat_word){
pred <- filter(bi_gram, mat_word == x)}
}
pred <- arrange(pred, desc(counts))
return(head(pred))
}
prediction("happy")
## Load ngram_frequency data
library(data.table)
library(dplyr)
library(stringr)
corpus <- read.table("ngram_freq.csv", header = T, stringsAsFactors = F)
corpus <- as.tbl(corpus)
four_gram <- filter(corpus, n_gram == "four")
tri_gram <- filter(corpus, n_gram == "tri")
bi_gram <- filter(corpus, n_gram == "bi")
uni_gram <- filter(corpus, n_gram =="uni")
pred <- uni_gram
prediction <- function(x){
x <- tolower(x)
x <- str_replace_all(x, pattern = "[[:punct:]]", "")
x <- str_replace_all(x, pattern = "\\d+", replacement = "")
x <- str_replace_all(x, pattern = "\\s+", " ")
x <- str_trim(x, side = "both")
if (length(unlist(strsplit(x, " "))) >= 3){
x <- word(x, -3, -1)
if (x %in% four_gram$mat_word){
pred <- filter(four_gram, mat_word == x)}
else if(!x %in% four_gram$mat_word){
x <- word(x, -2, -1)
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if (!x %in% corpus){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
}
else if (length(unlist(strsplit(x, " "))) == 2){
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if(!x %in% tri_gram$mat_word){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
else if (length(unlist(strsplit(x, " "))) == 1){
if (x %in% bi_gram$mat_word){
pred <- filter(bi_gram, mat_word == x)}
}
pred <- arrange(pred, desc(counts))
pred <- pred[, c(2,4)]
return(head(pred))
}
prediction("happy")
## Load ngram_frequency data
library(data.table)
library(dplyr)
library(stringr)
corpus <- read.table("ngram_freq.csv", header = T, stringsAsFactors = F)
corpus <- as.tbl(corpus)
four_gram <- filter(corpus, n_gram == "four")
tri_gram <- filter(corpus, n_gram == "tri")
bi_gram <- filter(corpus, n_gram == "bi")
uni_gram <- filter(corpus, n_gram =="uni")
pred <- uni_gram
prediction <- function(x){
x <- tolower(x)
x <- str_replace_all(x, pattern = "[[:punct:]]", "")
x <- str_replace_all(x, pattern = "\\d+", replacement = "")
x <- str_replace_all(x, pattern = "\\s+", " ")
x <- str_trim(x, side = "both")
if (length(unlist(strsplit(x, " "))) >= 3){
x <- word(x, -3, -1)
if (x %in% four_gram$mat_word){
pred <- filter(four_gram, mat_word == x)}
else if(!x %in% four_gram$mat_word){
x <- word(x, -2, -1)
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if (!x %in% corpus){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
}
else if (length(unlist(strsplit(x, " "))) == 2){
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if(!x %in% tri_gram$mat_word){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
else if (length(unlist(strsplit(x, " "))) == 1){
if (x %in% bi_gram$mat_word){
pred <- filter(bi_gram, mat_word == x)}
}
pred <- arrange(pred, desc(counts))
pred <- select(pred, pred_word, counts)
return(head(pred))
}
prediction("happy")
## Load ngram_frequency data
library(data.table)
library(dplyr)
library(stringr)
corpus <- read.table("ngram_freq.csv", header = T, stringsAsFactors = F)
corpus <- as.tbl(corpus)
four_gram <- filter(corpus, n_gram == "four")
tri_gram <- filter(corpus, n_gram == "tri")
bi_gram <- filter(corpus, n_gram == "bi")
uni_gram <- filter(corpus, n_gram =="uni")
pred <- uni_gram
prediction <- function(x){
x <- tolower(x)
x <- str_replace_all(x, pattern = "[[:punct:]]", "")
x <- str_replace_all(x, pattern = "\\d+", replacement = "")
x <- str_replace_all(x, pattern = "\\s+", " ")
x <- str_trim(x, side = "both")
if (length(unlist(strsplit(x, " "))) >= 3){
x <- word(x, -3, -1)
if (x %in% four_gram$mat_word){
pred <- filter(four_gram, mat_word == x)}
else if(!x %in% four_gram$mat_word){
x <- word(x, -2, -1)
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if (!x %in% corpus){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
}
else if (length(unlist(strsplit(x, " "))) == 2){
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if(!x %in% tri_gram$mat_word){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
else if (length(unlist(strsplit(x, " "))) == 1){
if (x %in% bi_gram$mat_word){
pred <- filter(bi_gram, mat_word == x)}
}
pred <- arrange(pred, desc(counts))
pred <- select(pred, pred_word, counts)
names(pred) <- c("pred_word", "counts")
return(head(pred))
}
prediction("happy")
class(pred)
## Load ngram_frequency data
library(data.table)
library(dplyr)
library(stringr)
corpus <- read.table("ngram_freq.csv", header = T, stringsAsFactors = F)
corpus <- as.tbl(corpus)
four_gram <- filter(corpus, n_gram == "four")
tri_gram <- filter(corpus, n_gram == "tri")
bi_gram <- filter(corpus, n_gram == "bi")
uni_gram <- filter(corpus, n_gram =="uni")
pred <- uni_gram
prediction <- function(x){
x <- tolower(x)
x <- str_replace_all(x, pattern = "[[:punct:]]", "")
x <- str_replace_all(x, pattern = "\\d+", replacement = "")
x <- str_replace_all(x, pattern = "\\s+", " ")
x <- str_trim(x, side = "both")
if (length(unlist(strsplit(x, " "))) >= 3){
x <- word(x, -3, -1)
if (x %in% four_gram$mat_word){
pred <- filter(four_gram, mat_word == x)}
else if(!x %in% four_gram$mat_word){
x <- word(x, -2, -1)
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if (!x %in% corpus){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
}
else if (length(unlist(strsplit(x, " "))) == 2){
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if(!x %in% tri_gram$mat_word){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
else if (length(unlist(strsplit(x, " "))) == 1){
if (x %in% bi_gram$mat_word){
pred <- filter(bi_gram, mat_word == x)}
}
pred <- arrange(pred, desc(counts))
pred <- select(pred, pred_word, counts)
pred <- as.data.frame(pred)
return(head(pred))
}
prediction("happy")
shiny::runApp('word_prediction')
shiny::runApp('word_prediction')
shiny::runApp('word_prediction')
shiny::runApp('word_prediction')
shiny::runApp('word_prediction')
## Load ngram_frequency data
library(data.table)
library(dplyr)
library(stringr)
corpus <- read.table("ngram_freq.csv", header = T, stringsAsFactors = F)
corpus <- as.tbl(corpus)
four_gram <- filter(corpus, n_gram == "four")
tri_gram <- filter(corpus, n_gram == "tri")
bi_gram <- filter(corpus, n_gram == "bi")
uni_gram <- filter(corpus, n_gram =="uni")
pred <- uni_gram
prediction <- function(x){
x <- tolower(x)
x <- str_replace_all(x, pattern = "[[:punct:]]", "")
x <- str_replace_all(x, pattern = "\\d+", replacement = "")
x <- str_replace_all(x, pattern = "\\s+", " ")
x <- str_trim(x, side = "both")
if (length(unlist(strsplit(x, " "))) >= 3){
x <- word(x, -3, -1)
if (x %in% four_gram$mat_word){
pred <- filter(four_gram, mat_word == x)}
else if(!x %in% four_gram$mat_word){
x <- word(x, -2, -1)
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if (!x %in% corpus){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
}
else if (length(unlist(strsplit(x, " "))) == 2){
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if(!x %in% tri_gram$mat_word){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
else if (length(unlist(strsplit(x, " "))) == 1){
if (x %in% bi_gram$mat_word){
pred <- filter(bi_gram, mat_word == x)}
}
pred <- arrange(pred, desc(counts))
pred <- select(pred, pred_word, counts)
pred <- as.data.frame(pred)
return(head(pred))
}
prediction("happy mothers")
return(pred)
## Load ngram_frequency data
library(data.table)
library(dplyr)
library(stringr)
corpus <- read.table("ngram_freq.csv", header = T, stringsAsFactors = F)
corpus <- as.tbl(corpus)
four_gram <- filter(corpus, n_gram == "four")
tri_gram <- filter(corpus, n_gram == "tri")
bi_gram <- filter(corpus, n_gram == "bi")
uni_gram <- filter(corpus, n_gram =="uni")
pred <- uni_gram
prediction <- function(x){
x <- tolower(x)
x <- str_replace_all(x, pattern = "[[:punct:]]", "")
x <- str_replace_all(x, pattern = "\\d+", replacement = "")
x <- str_replace_all(x, pattern = "\\s+", " ")
x <- str_trim(x, side = "both")
if (length(unlist(strsplit(x, " "))) >= 3){
x <- word(x, -3, -1)
if (x %in% four_gram$mat_word){
pred <- filter(four_gram, mat_word == x)}
else if(!x %in% four_gram$mat_word){
x <- word(x, -2, -1)
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if (!x %in% corpus){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
}
else if (length(unlist(strsplit(x, " "))) == 2){
if (x %in% tri_gram$mat_word){
pred <- filter(tri_gram, mat_word == x)}
else if(!x %in% tri_gram$mat_word){
x <- word(x, -1)
if (x %in% bi_gram$mat_word){
pred <-filter(bi_gram, mat_word == x)}
}
}
else if (length(unlist(strsplit(x, " "))) == 1){
if (x %in% bi_gram$mat_word){
pred <- filter(bi_gram, mat_word == x)}
}
pred <- arrange(pred, desc(counts))
pred <- select(pred, pred_word, counts)
pred <- as.data.frame(pred)
return(pred)
}
prediction("happy")
shiny::runApp('word_prediction')
shiny::runApp('word_prediction')
shiny::runApp('word_prediction')
shiny::runApp('word_prediction')
library(rsconnect)
deployApp(word_prediction)
deployApp()
setwd("./word_prediction")
deployApp()
rsconnect::configureApp("word_prediction", size="large")
setwd("C:/Users/jpeng/Documents/courses/DataScienceCapstone/final/Next_Word_Prediction")
rsconnect::configureApp("word_prediction", size="large")
shiny::runApp('word_prediction')
rsconnect::configureApp("word_prediction", size="large")
setwd("./word_prediction")
deployAPP(size = "large")
deployApp(size = "large")
shiny::runApp()
